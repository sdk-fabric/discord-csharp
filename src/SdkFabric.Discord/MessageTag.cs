/**
 * MessageTag automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */


using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using RestSharp;
using Sdkgen.Client;
using Sdkgen.Client.Exception;

namespace SdkFabric.Discord;

public class MessageTag : TagAbstract {
    public MessageTag(RestClient httpClient, Parser parser): base(httpClient, parser)
    {
    }


    /**
     * Retrieves the messages in a channel.
     */
    public async Task<System.Collections.Generic.List<Message>> GetAll(string channelId, string around, string before, string after, int limit)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("channel_id", channelId);

        Dictionary<string, object> queryParams = new();
        queryParams.Add("around", around);
        queryParams.Add("before", before);
        queryParams.Add("after", after);
        queryParams.Add("limit", limit);

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/channels/:channel_id/messages", pathParams), Method.Get);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<System.Collections.Generic.List<Message>>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode >= 0 && statusCode <= 999)
        {
            var data = this.Parser.Parse<Error>(response.Content);

            throw new ErrorException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Retrieves a specific message in the channel. Returns a message object on success.
     */
    public async Task<Message> Get(string channelId, string messageId)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("channel_id", channelId);
        pathParams.Add("message_id", messageId);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/channels/:channel_id/messages/:message_id", pathParams), Method.Get);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<Message>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode >= 0 && statusCode <= 999)
        {
            var data = this.Parser.Parse<Error>(response.Content);

            throw new ErrorException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Post a message to a guild text or DM channel. Returns a message object. Fires a Message Create Gateway event. See message formatting for more information on how to properly format messages.
     */
    public async Task<Message> Create(string channelId, Message payload)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("channel_id", channelId);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/channels/:channel_id/messages", pathParams), Method.Post);
        this.Parser.Query(request, queryParams, queryStructNames);
        request.AddJsonBody(JsonSerializer.Serialize(payload));

        request.AddOrUpdateHeader("Content-Type", "application/json");

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<Message>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode >= 0 && statusCode <= 999)
        {
            var data = this.Parser.Parse<Error>(response.Content);

            throw new ErrorException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Edit a previously sent message. The fields content, embeds, and flags can be edited by the original message author. Other users can only edit flags and only if they have the MANAGE_MESSAGES permission in the corresponding channel. When specifying flags, ensure to include all previously set flags/bits in addition to ones that you are modifying. Only flags documented in the table below may be modified by users (unsupported flag changes are currently ignored without error).
     */
    public async Task<Message> Update(string channelId, string messageId, Message payload)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("channel_id", channelId);
        pathParams.Add("message_id", messageId);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/channels/:channel_id/messages/:message_id", pathParams), Method.Patch);
        this.Parser.Query(request, queryParams, queryStructNames);
        request.AddJsonBody(JsonSerializer.Serialize(payload));

        request.AddOrUpdateHeader("Content-Type", "application/json");

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<Message>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode >= 0 && statusCode <= 999)
        {
            var data = this.Parser.Parse<Error>(response.Content);

            throw new ErrorException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Delete a message. If operating on a guild channel and trying to delete a message that was not sent by the current user, this endpoint requires the MANAGE_MESSAGES permission.
     */
    public async void Remove(string channelId, string messageId)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("channel_id", channelId);
        pathParams.Add("message_id", messageId);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/channels/:channel_id/messages/:message_id", pathParams), Method.Delete);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            return;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode >= 0 && statusCode <= 999)
        {
            var data = this.Parser.Parse<Error>(response.Content);

            throw new ErrorException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Crosspost a message in an Announcement Channel to following channels. This endpoint requires the SEND_MESSAGES permission, if the current user sent the message, or additionally the MANAGE_MESSAGES permission, for all other messages, to be present for the current user.
     */
    public async Task<Message> Crosspost(string channelId, string messageId)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("channel_id", channelId);
        pathParams.Add("message_id", messageId);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/channels/:channel_id/messages/:message_id/crosspost", pathParams), Method.Post);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<Message>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode >= 0 && statusCode <= 999)
        {
            var data = this.Parser.Parse<Error>(response.Content);

            throw new ErrorException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    public async Task<System.Collections.Generic.List<User>> GetReactionsByEmoji(string channelId, string messageId, string emoji, int type, string after, int limit)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("channel_id", channelId);
        pathParams.Add("message_id", messageId);
        pathParams.Add("emoji", emoji);

        Dictionary<string, object> queryParams = new();
        queryParams.Add("type", type);
        queryParams.Add("after", after);
        queryParams.Add("limit", limit);

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/channels/:channel_id/messages/:message_id/reactions/:emoji", pathParams), Method.Get);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<System.Collections.Generic.List<User>>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode >= 0 && statusCode <= 999)
        {
            var data = this.Parser.Parse<Error>(response.Content);

            throw new ErrorException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    public async void DeleteAllReactions(string channelId, string messageId)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("channel_id", channelId);
        pathParams.Add("message_id", messageId);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/channels/:channel_id/messages/:message_id/reactions", pathParams), Method.Delete);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            return;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode >= 0 && statusCode <= 999)
        {
            var data = this.Parser.Parse<Error>(response.Content);

            throw new ErrorException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }


}
