/**
 * ChannelReactionTag automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */


using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using RestSharp;
using Sdkgen.Client;
using Sdkgen.Client.Exception;

namespace SdkFabric.Discord;

public class ChannelReactionTag : TagAbstract {
    public ChannelReactionTag(RestClient httpClient, Parser parser): base(httpClient, parser)
    {
    }


    public async Task<List<User>> GetAll(string channelId, string messageId, string emoji, int type, string after, int limit)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("channel_id", channelId);
        pathParams.Add("message_id", messageId);
        pathParams.Add("emoji", emoji);

        Dictionary<string, object> queryParams = new();
        queryParams.Add("type", type);
        queryParams.Add("after", after);
        queryParams.Add("limit", limit);

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/channels/:channel_id/messages/:message_id/reactions/:emoji", pathParams), Method.Get);
        this.Parser.Query(request, queryParams, queryStructNames);

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            return this.Parser.Parse<List<User>>(response.Content);
        }

        throw (int) response.StatusCode switch
        {
            _ => throw new UnknownStatusCodeException("The server returned an unknown status code"),
        };
    }

    public async void DeleteAll(string channelId, string messageId)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("channel_id", channelId);
        pathParams.Add("message_id", messageId);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/channels/:channel_id/messages/:message_id/reactions", pathParams), Method.Delete);
        this.Parser.Query(request, queryParams, queryStructNames);

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            return;
        }

        throw (int) response.StatusCode switch
        {
            _ => throw new UnknownStatusCodeException("The server returned an unknown status code"),
        };
    }


}
